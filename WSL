repeat wait() until game:IsLoaded()

local VirtualUser=game:service'VirtualUser'
game:service'Players'.LocalPlayer.Idled:connect(function()
	print("bad afk >:(")
	VirtualUser:CaptureController()
	VirtualUser:ClickButton2(Vector2.new())
end)

-- // File System Things
local Name = "WSLSettings"..".lua"
local Settings = {
    Technique = "Weight",
    Location = nil,
    Machine = nil,
    Treadmill = nil,
    AutoRebirth = nil,
    AutoDaily = nil
}

local ThemesFile = "Shit Boy Hub Theme.settings"
local Themes = {
    Background = {22, 22, 23},
    Glow = {0, 63, 255},
    Accent = {42, 44, 61},
    LightContrast = {0,0,0},
    DarkContrast = {42, 44, 61},
    TextColor = {255, 255, 255}
}

local SettingsFile = "Shit Boy Hub Keybinds.lua"
local KeybindSettings = {
    key = "One"
}

local JSON
local ThemesJSON
local KeybindsJSON

if not pcall(function() readfile(Name) end) then writefile(Name, game:GetService('HttpService'):JSONEncode(Settings)) end
if not pcall(function() readfile(ThemesFile) end) then writefile(ThemesFile, game:GetService('HttpService'):JSONEncode(Themes)) end
if not pcall(function() readfile(SettingsFile) end) then writefile(SettingsFile, game:GetService('HttpService'):JSONEncode(KeybindSettings)) end

JSON = game:GetService('HttpService'):JSONDecode(readfile(Name))
ThemesJSON = game:GetService('HttpService'):JSONDecode(readfile(ThemesFile))
KeybindsJSON = game:GetService('HttpService'):JSONDecode(readfile(SettingsFile))

local function Save()
	writefile(Name, game:GetService('HttpService'):JSONEncode(JSON))
    writefile(ThemesFile, game:GetService('HttpService'):JSONEncode(ThemesJSON))
    writefile(SettingsFile, game:GetService('HttpService'):JSONEncode(KeybindsJSON))
end

-- // Variables
local player = game.Players.LocalPlayer
local function GetCharacter()
    local char = game:GetService("Players").LocalPlayer.Character or game:GetService("Players").LocalPlayer.CharacterAdded:Wait()
    if char then return char else return false end
end
local runservice = game:GetService("RunService")
local noclip = false

pcall(function()
	runservice.Stepped:Connect(function()
		if noclip then
			player.Character:WaitForChild("Humanoid"):ChangeState(11)
		end
	end)
end)

local petinfo = require(game:GetService("ReplicatedStorage").petInfo)

-- // Venyx UI
local Venyx = loadstring(game:HttpGet("https://raw.githubusercontent.com/Solx69/venyx-edit/main/library"))()
local UI = Venyx.new({
    title = "Shit Boy Hub - Weight Lifting Simulator"
})

-- // Pages
local Main = UI:addPage({
    title = "Main",
    icon = 1762380898
})
local Misc = UI:addPage({
    title = "Misc",
    icon = 3340612851
})
local Keybinds = UI:addPage({
    title = "Keybinds",
    icon = 3459878570
})
local Theme = UI:addPage({
    title = "Theme",
    icon = 510607738
})
local Credits = UI:addPage({
    title = "Credits",
    icon = 4620467099
})

-- // Main Sections
local MainA = Main:addSection({
    title = "Auto-Rebirth"
})
local MainB = Main:addSection({
    title = "Auto-Lift"
})
local MainC = Main:addSection({
    title = "Auto-Machine"
})
local MainD = Main:addSection({
    title = "Auto-Treadmill"
})
-- // Misc Sections
local MiscA = Misc:addSection({
    title = "Teleports"
})
local MiscB = Misc:addSection({
    title = "Rewards"
})
local MiscC = Misc:addSection({
    title = "Crystals"
})
-- // Keybinds Sections
local KeybindsA = Keybinds:addSection({
    title = "Keybinds"
})
-- // Theme Sections
local Colors = Theme:addSection({
    title = "Colors"
})
-- // Credits Sections
local creds = Credits:addSection({
    title = "Credits"
})

-- // Main Page
MainA:addToggle({
    title = "Auto-Rebirth",
    default = JSON.AutoRebirth,
    callback = function (bool)
        JSON.AutoRebirth = bool
    end
})
local AutoLift
MainB:addToggle({
    title = "Auto-Lift",
    callback = function(bool)
        AutoLift = bool
    end
})
MainB:addDropdown({
    title = "Technique Selection",
    list = {"Weight","Pushups","Situps"},
    default = JSON.Technique,
    callback = function (val)
        JSON.Technique = val
    end
})
local MachineFarm = nil
local MachineToggle = MainC:addToggle({
    title = "Machine-Farm",
    callback = function (bool)
        MachineFarm = bool
    end
})
local machines = {}
for i,v in pairs(workspace.machines:GetChildren()) do
    if not table.find(machines,v.Name) then
        table.insert(machines,v.Name)
    end
end
MainC:addDropdown({
    title = "Machine Selection",
    default = JSON.Machine,
    list = machines,
    callback = function (val)
        JSON.Machine = val
    end
})
MainD:addToggle({
    title = "Treadmill-Farm",
    callback = function (bool)
        TreadmillFarm = bool
    end
})
local treadmills = {}
for i,v in pairs(workspace.Treadmills:GetChildren()) do
    if not table.find(treadmills,v.Name) then
        table.insert(treadmills,v.Name)
    end
end
MainD:addDropdown({
    title = "Treadmill Selection",
    default = JSON.Treadmill,
    list = treadmills,
    callback = function (val)
        JSON.Treadmill = val
    end
})
-- // Misc Page
MiscA:addDropdown({
    title = "Location Selection",
    list = {"Sky Gym","Hell Gym","Space Gym","Winter Gym","Candy Gym","Speed City","Desert Gym"},
    default = JSON.Location,
    callback = function (val)
        JSON.Location = string.gsub(val," ","")
    end
})
MiscA:addButton({
    title = "Teleport To Selected Location",
    callback = function ()
        if GetCharacter():FindFirstChild("HumanoidRootPart") and JSON.Location ~= nil then
            GetCharacter().HumanoidRootPart.CFrame = workspace["teleportations/barrier"]["tp_parts"]["to"..JSON.Location].CFrame
        end
    end
})
MiscB:addButton({
    title = "Redeem All Codes",
    callback = function ()
        local s = require(game:GetService("ReplicatedStorage").Codes)
        for i,v in pairs(s) do
            local args = {
                [1] = tostring(i)
            }
            
            game:GetService("ReplicatedStorage").rEvents.codeRemote:InvokeServer(unpack(args))
        end
    end
})
MiscB:addToggle({
    title = "Auto-Collect Group Chest",
    default = JSON.AutoDaily,
    callback = function (bool)
        JSON.AutoDaily = bool
    end
})

local AutoOpen
MiscC:addToggle({
    title = "Auto-Open",
    callback = function (bool)
        AutoOpen = bool
    end
})
local CrystalID
MiscC:addDropdown({
    title = "Crystal To Open",
    list = {"Red Crystal - 300","Inferno Crystal - 1,200","Electro Legends Crystal - 2,500","Space Crystal - 8,000","Snow Crystal - 15,000","Yellow Crystal - 25,000","Crystal Caseref - 25,000","Lightning Crystal - 500,000"},
    callback = function (val)
        local v = string.gsub(val," ","")
        local Crystal = string.split(v,"-")[1]
        CrystalID = workspace.Crystals[Crystal].ID.Value
    end
})
local AutoSell
MiscC:addToggle({
    title = "Auto-Sell",
    callback = function (bool)
        AutoSell = bool
    end
})
local Rarities = {}
MiscC:addChecklist({
    title = "Rarities To Sell",
    list = {"Basic","Advanced","Rare","Epic","Unique","Omega"},
    callback = function (val,bool)
        if bool == true and not table.find(Rarities,val) then
            table.insert(Rarities,val)
        elseif bool == false and table.find(Rarities,val) then
            local num = table.find(Rarities,val)
            table.remove(Rarities,num)
        end
    end
})

-- // Keybinds Page
KeybindsA:addKeybind({
    title = "Toggle UI",
    key = Enum.KeyCode[KeybindsJSON.key],
    callback = function ()
        UI:toggle()
        if MachineFarm == true then
            MachineFarm = false
            MachineToggle.Options = {
                title = MachineToggle.Options.title,
                toggled = false
            }
            MainC:updateToggle(MachineToggle)
        end
    end,
    changedCallback = function (key)
        KeybindsJSON.key = string.split(tostring(key),".")[3]
    end
})

-- // Color Theme Customisation Page
for theme, color in pairs(ThemesJSON) do
    Colors:addColorPicker({
        title = theme,
        default = Color3.fromRGB(color[1],color[2],color[3]),
        callback = function(color3)
            ThemesJSON[theme] = {color3.r*255,color3.g*255,color3.b*255}
            UI:setTheme({
                theme = theme,
                color3 = color3
            })
        end
    })
end

for theme, color in pairs(ThemesJSON) do
    UI:setTheme({
        theme = theme,
        color3 = Color3.fromRGB(color[1],color[2],color[3])
    })
end

-- // Credits Page
creds:addButton({
    title = "Scripting by Sol#2278",
    callback = function ()
        setclipboard("Sol#2278")
    end
})
creds:addButton({
    title = "UI Fork by Stefunk12#5820",
    callback = function ()
        setclipboard("Stefunk12#5820")
    end
})
creds:addButton({
    title = "UI by Dino"
})
creds:addButton({
    title = "Copy Discord Link",
    callback = function ()
        setclipboard("discord.gg/6q5ECHPSrC")
    end
})

UI:SelectPage({
    page = UI.pages[1], 
    toggle = true
})

task.spawn(function ()
    while true do
        if AutoLift then
            if GetCharacter():FindFirstChild(JSON.Technique) then
                VirtualUser:ClickButton1(Vector2.new(100000,100000))
            elseif not GetCharacter():FindFirstChild(JSON.Technique) then
                if player.Backpack:FindFirstChild(JSON.Technique) and GetCharacter():FindFirstChild("Humanoid") then
                    GetCharacter().Humanoid:EquipTool(player.Backpack:FindFirstChild(JSON.Technique))
                end
            end
        end
        wait(0.1)
    end
end)
task.spawn(function ()
    while true do
        if MachineFarm and JSON.Machine then
            if UI.container.Main.AbsoluteSize.Y ~= 0 then
                wait(0.5)
                if MachineFarm then
                    UI:toggle()
                    UI:Notify({
                        title = "Shit Boy Hub Notification",
                        text = "Press \""..KeybindsJSON.key.."\" to disable the machine farm!"
                    })
                    repeat wait() until UI.container.Main.AbsoluteSize.Y == 0
                end
            elseif UI.container.Main.AbsoluteSize.Y == 0 then
                if iswindowactive() == true then
                    if GetCharacter():FindFirstChild("HumanoidRootPart") and GetCharacter():FindFirstChild("Humanoid") then
                        if GetCharacter().Humanoid.Sit == true then
                            mouse1click()
                        elseif GetCharacter().Humanoid.Sit == false then
                            for i,v in pairs(workspace.machines:GetChildren()) do
                                if v and v.Name == JSON.Machine and v:FindFirstChild("Seat") and v.Seat.Occupant == nil then
                                    noclip = true
                                    repeat wait()
                                        if GetCharacter():FindFirstChild("Humanoid") and GetCharacter():FindFirstChild("HumanoidRootPart") then
                                            GetCharacter().HumanoidRootPart.CFrame = v.Seat.CFrame
                                            keypress(0x45)
                                            wait()
                                            keyrelease(0x45)
                                        end
                                    until not MachineFarm or not GetCharacter():FindFirstChild("Humanoid") or GetCharacter().Humanoid.Sit == true
                                    noclip = false
                                end
                            end
                        end
                    end
                elseif iswindowactive() == false then
                    messagebox("You need to tab in to roblox in order to use the machine farm!","Shit Boy Hub Notification",0)
                    repeat wait() until iswindowactive() == true
                end
            end
        end
        wait()
    end
end)
task.spawn(function ()
    while true do
        if TreadmillFarm and JSON.Treadmill then
            if iswindowactive() then
                if GetCharacter() and GetCharacter():FindFirstChild("HumanoidRootPart") and GetCharacter():FindFirstChild("Humanoid") then
                    for i,v in pairs(workspace.Treadmills:GetChildren()) do
                        if v and v.Name == JSON.Treadmill and v:FindFirstChild("guiPart") and v.guiPart:FindFirstChild("gui") and v:FindFirstChild("conveyerPart") then
                            local gui,conveyer = v.guiPart.gui,v.conveyerPart
                            if gui.Enabled == false and TreadmillFarm then
                                if iswindowactive() then
                                    GetCharacter().HumanoidRootPart.CFrame = CFrame.new(conveyer.Position + Vector3.new(0,15,0))
                                    repeat wait()
                                        keypress(0x57)
                                        workspace.Camera.CFrame = CFrame.new(GetCharacter().HumanoidRootPart.Position,gui.Parent.Position)
                                    until not TreadmillFarm or iswindowactive() == false or not GetCharacter() or not GetCharacter():FindFirstChild("Humanoid")
                                    wait()
                                    keyrelease(0x57)
                                end
                            end
                        end
                    end
                end
            else
                messagebox("You need to tab in to roblox in order to use the treadmill farm!","Shit Boy Hub Notification",0)
                repeat wait() until iswindowactive()
            end
        end
        wait()
    end
end)
task.spawn(function ()
    while true do
        if JSON.AutoRebirth then
            game:GetService("ReplicatedStorage").rEvents.rebirthEvent:FireServer()
        end
        wait()
    end
end)
task.spawn(function ()
    while true do
        if JSON.AutoDaily and workspace.Chests.GroupChest.Prop.Title.Title.Text == "Ready To Collect" then
            local args = {
                [1] = workspace.Chests.GroupChest
            }

            game:GetService("ReplicatedStorage").Events.DailyReward:FireServer(unpack(args))
        end
        wait()
    end
end)
task.spawn(function ()
    while true do
        if AutoOpen then
            if CrystalID then
            local args = {
                [1] = CrystalID
            }

            game:GetService("ReplicatedStorage").rEvents.openCrystal:InvokeServer(unpack(args))
            elseif not CrystalID then
                UI:Notify({
                    title = "Shit Boy Hub Notification",
                    text = "Please select a Crystal from the crystal drop-down"
                })
            end
        end
        wait()
    end
end)

local Colors = {
    Basic = {255,255,255},
    Advanced = {0,255,0},
    Rare = {0,170,255},
    Epic = {170,85,255},
    Unique = {255,85,0},
    Omega = {27,42,53}
}
task.spawn(function ()
    while true do
        if AutoSell then
            local petRarities = petinfo.petRarities
            for i,v in pairs(player.PlayerGui.mainGui.petsMenu.skinPages:GetChildren()) do
                for i,petButton in pairs(v:GetChildren()) do
                    if petButton:IsA("ImageButton") then
                        local name = petButton.nameLabel.Text
                        for i,rarity in pairs(Rarities) do
                            if table.find(petRarities[rarity],name) then
                                local PetID = petButton.UUID.Value
                                game:GetService("ReplicatedStorage").rEvents.petInfo:InvokeServer(PetID,"sellPet")
                            end
                        end
                    end
                end
            end
            for i,v in pairs(player.PlayerGui.mainGui.skinsMenu.skinPages:GetChildren()) do
                for i,skinButton in pairs(v:GetChildren()) do
                    if skinButton:IsA("ImageButton") then
                        local color = skinButton.nameLabel.backFrame.ImageColor3
                        for i,rarity in pairs(Rarities) do
                            if color == Color3.fromRGB(Colors[rarity][1],Colors[rarity][2],Colors[rarity][3]) then
                                local SkinID = skinButton.UUID.Value
                                game:GetService("ReplicatedStorage").rEvents.equipSkin:InvokeServer(SkinID,"sellPet")
                            end
                        end
                    end
                end
            end
        end
        wait()
    end
end)

game.Players.PlayerRemoving:Connect(function(p)
	if p == player then
		Save()
	end
end)
